#include <iostream>
#include <vector>
#include <conio.h>

class game
{
public:
    game() {}
    game(int n):size(n)
    {
        game_ = true;
        is_zero = false;

        field = new int* [size];
        for (int i(0); i < size; ++i)
        {
            field[i] = new int[size];
        }
        for (int i(0); i < size; ++i)
        {
            for (int j(0); j < size; ++j)
            {
                field[i][j] = 0;
            }
        }

        int k = rand() % size;
        int l = rand() % size;
        //field[k][l] = 2;
        while (1)
        {
            k = rand() % size;
            l = rand() % size;
            if (field[k][l] == 0) break;
        }
        //field[k][l] = 2;
        field[3][3] = 2;
        field[0][1] = 2;
        field[0][2] = 0;
        field[0][3] = 2;

    }
    ~game() 
    {
        for (int i(0); i < size; ++i)
        {
            delete[] field[i];
        }
        delete[] field;
    }
    void fill_field();
    void input();
    void update(char ch);
    void show();
    bool game_over() 
    {
        /*std::vector<int> v;
        is_zero = false;
        bool is_turn = false;
        for (int i(0); i < size; ++i)
        {
            for (int j(0); j < size; ++j)
            {
                if (field[i][j]) is_zero = false;
                else
                {
                    is_zero = true;
                    break;
                }
                if (i + 1 < size && field[i][j] == field[i + 1][j] && field[i][j] && field[i + 1][j]
                    || field[i][j] == field[i][j + 1] && field[i][j] && field[i][j + 1]
                    || 1
                    || 1) is_turn = true;
            }
        }
        for (int i(0); i < size; ++i)
        {
            for (int j(0); j < size; ++j)
            {
                if (i+1 < size && field[i][j] && field[i+1][j] && field[i][j] == field[i+1][j]) v.push_back(1);
                else if(!is_zero) v.push_back(0);
            }
        }
        for (int i : v) 
        {
            if (i == 1)
            {
                game_ = true;
                break;
            }
            else game_ = false;
        }
        v.clear();*/
        return game_;
    }
    void func(char ch);
private:
    bool is_zero;
    bool game_;
    int** field;
    int size;
};

void game::fill_field()
{
    /*int k = 0, l = 0, i = 0;
    while (1)
    {
        i++;
        k = rand() % size;
        l = rand() % size;
        if (field[k][l] == 0)
        {
            field[k][l] = 2;
            break;
        }
        if (i == size*2) break;
    }*/

    show();
}

void game::input()
{
    char ch = ' ';
    if (_kbhit())
    {
        switch (ch = _getch())
        {
        case 'w':
            ch = 'w';
            update(ch);
            break;
        case 'a':
            ch = 'a';
            update(ch);
            break;
        case 's':
            ch = 's';
            update(ch);
            break;
        case 'd':
            ch = 'd';
            update(ch);
            break;
        default:
            break;
        }
    }
}

void game::func(char ch)
{

}

void game::update(char ch)
{
    system("cls");
    int cntw = 0;
    int tmp_k = 0;
    bool do_tmp_k = false;

    for (int i(0); i < size; ++i)
    {
        for (int j(0); j < size; ++j)
        {
                for (int k = 1; k < size; ++k)
                {
                    if (do_tmp_k)
                    {
                        k = tmp_k;
                    }
                    int l = 0, r = 0, left1 = 0, left2 = 0, right1 = 0, right2 = 0;
                    if (ch == 'w')
                    {
                        l = i;
                        r = j;
                        left1 = l + k;
                        left2 = l + 1;
                        right1 = r;
                        right2 = r;
                    }
                    else if (ch == 's')
                    {
                        l = size - 1 - i;
                        r = j;
                        left1 = l - k;
                        left2 = l - 1;
                        right1 = r;
                        right2 = r;
                    }
                    else if (ch == 'a')
                    {
                        l = i;
                        r = j;
                        right1 = r + k;
                        right2 = r + 1;
                        left1 = l;
                        left2 = l;
                    }
                    else if (ch == 'd')
                    {
                        l = i;
                        r = j;
                        right1 = r - k;
                        right2 = r - 1;
                        left1 = l;
                        left2 = l;
                    }

                    //std::cout << "\n" << l << " " << r << " " << left1 << " " << left2 << "\n";
                    std::cout << "\n" << l << " " << r << " " << left1 << " " << right1 << " " << left2 << " " << right2 << " k: " << k << "\n";
                    if (left1 < size && left1 >=0 && right1 < size && right1 >= 0 && left2 >= 0 && left2 < size && right1 < size && right1 >= 0)
                    {                     
                        //std::cout << "\n" << i << " " << j << " " << k << "\n";
                        if (field[l][r] && field[left1][right1] && field[l][r] == field[left1][right1] && field[l][r] == field[left2][right2])
                        {
                            //std::cout << "\n" << l << " " << r << "\n";
                            field[l][r] += field[left1][right1];
                            field[left1][right1] = 0;
                        }
                        else if (field[l][r] && !field[left2][right2]) continue;
                        else if (!field[l][r] && field[left1][right1])
                        {
                            field[l][r] = field[left1][right1];
                            field[left1][right1] = 0;
                        }
                    }
                    //std::cout << "\n";
                    //show();
                    //std::cout << "\n";

                    if (i == size - 1 && j == size - 1 && !cntw)
                    {
                        i = 0;
                        j = 0;
                        r = j;
                        tmp_k = 1;
                        do_tmp_k = true;
                        cntw = 1;
                        //std::cout << "\nSWAP" << k << "\n ";
                    }
                    else do_tmp_k = false;
                }
        }
    }
    fill_field();
}

void game::show()
{
    for (int i(0); i < size; ++i)
    {
        for (int j(0); j < size; ++j)
        {
            std::cout << " [ " << field[i][j] << " ] ";
        }
        std::cout << "\n";
    }
}

int main(int argc, char** argv)
{
    //srand(time(NULL));
    int n = 4;
    game g(n);
    g.show();
    while (g.game_over())
    {
        g.input();
    }
    if (!g.game_over()) std::cout << "You loose :(\n";
            
    return 0;
}

